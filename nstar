#!/bin/bash
# nstar - One command to rule them all

set -e

NSTAR_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$NSTAR_DIR"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${BLUE}üöÄ nstar - Streaming Kernel Loop System${NC}"
    echo ""
    echo "Usage: ./nstar <command> [options]"
    echo ""
    echo "Commands:"
    echo "  run <goal>           Run a task (e.g., './nstar run \"Add tests\"')"
    echo "  chat                 Start interactive chat"
    echo "  server               Start streaming server"
    echo "  web                  Start server and open web interface"
    echo "  paste                Save clipboard/stdin as context"
    echo "  status               Show system status"
    echo "  help                 Show this help"
    echo ""
    echo "Examples:"
    echo "  ./nstar run \"Add unit tests for authentication\""
    echo "  ./nstar chat"
    echo "  ./nstar web"
    echo "  echo \"context\" | ./nstar paste"
}

check_deps() {
    if [ ! -f "package.json" ]; then
        echo -e "${YELLOW}üì¶ Installing dependencies...${NC}"
        npm install
    fi
    
    if [ ! -x "bin/nstar.mjs" ]; then
        chmod +x bin/*.mjs
    fi
}

start_server() {
    local port=${1:-8080}
    echo -e "${GREEN}üöÄ Starting nstar server on port $port...${NC}"
    
    # Kill existing server if running
    pkill -f "nstar-server" 2>/dev/null || true
    sleep 1
    
    PORT=$port node bin/nstar-server.mjs &
    SERVER_PID=$!
    
    # Wait for server to start
    sleep 3
    
    # Check if server is running
    if curl -s "http://localhost:$port/status" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Server running at http://localhost:$port${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Failed to start server${NC}"
        return 1
    fi
}

main() {
    check_deps
    
    case "${1:-help}" in
        "run")
            if [ -z "$2" ]; then
                echo -e "${RED}‚ùå Goal required. Usage: ./nstar run \"Your goal here\"${NC}"
                exit 1
            fi
            
            goal="$2"
            mode="${3:-fast}"
            
            echo -e "${BLUE}üéØ Running: $goal${NC}"
            node bin/nstar.mjs run --goal="$goal" --mode="$mode"
            ;;
            
        "chat")
            echo -e "${BLUE}üí¨ Starting interactive chat...${NC}"
            
            # Try to connect to existing server first
            if curl -s "http://localhost:8080/status" > /dev/null 2>&1; then
                echo -e "${GREEN}üì° Connected to existing server${NC}"
                NSTAR_SERVER=http://localhost:8080 node bin/nstar-chat.mjs
            elif curl -s "http://localhost:8081/status" > /dev/null 2>&1; then
                echo -e "${GREEN}üì° Connected to existing server on 8081${NC}"
                NSTAR_SERVER=http://localhost:8081 node bin/nstar-chat.mjs
            else
                echo -e "${YELLOW}üöÄ Starting server for chat...${NC}"
                if start_server 8080; then
                    NSTAR_SERVER=http://localhost:8080 node bin/nstar-chat.mjs
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Falling back to CLI mode${NC}"
                    node bin/nstar-chat.mjs
                fi
            fi
            ;;
            
        "server")
            port="${2:-8080}"
            start_server "$port"
            
            echo -e "${BLUE}üì° Server endpoints:${NC}"
            echo "  Status: http://localhost:$port/status"
            echo "  Chat: POST http://localhost:$port/chat"
            echo "  Stream: http://localhost:$port/stream"
            echo ""
            echo -e "${YELLOW}Press Ctrl+C to stop${NC}"
            
            # Keep server running
            wait $SERVER_PID
            ;;
            
        "web")
            port="${2:-8080}"
            
            if start_server "$port"; then
                echo -e "${BLUE}üåê Web interface available at:${NC}"
                echo "  http://localhost:$port (update SERVER_URL in public/chat.html)"
                echo ""
                echo -e "${YELLOW}Opening web interface...${NC}"
                
                # Try to open browser
                if command -v open > /dev/null; then
                    open "public/chat.html"
                elif command -v xdg-open > /dev/null; then
                    xdg-open "public/chat.html"
                else
                    echo "Open public/chat.html in your browser"
                fi
                
                echo -e "${YELLOW}Press Ctrl+C to stop server${NC}"
                wait $SERVER_PID
            fi
            ;;
            
        "paste")
            echo -e "${BLUE}üìã Saving context...${NC}"
            
            if [ ! -t 0 ]; then
                # Reading from stdin
                result=$(node bin/nstar.mjs paste)
                echo -e "${GREEN}‚úÖ $result${NC}"
            else
                # Try clipboard
                result=$(node bin/nstar.mjs paste)
                if [ $? -eq 0 ]; then
                    echo -e "${GREEN}‚úÖ $result${NC}"
                else
                    echo -e "${RED}‚ùå No input from stdin or clipboard${NC}"
                    exit 1
                fi
            fi
            ;;
            
        "status")
            echo -e "${BLUE}üìä nstar System Status${NC}"
            echo ""
            
            # Check files
            echo -e "${GREEN}üìÅ Files:${NC}"
            echo "  CLI: $(ls bin/*.mjs | wc -l | tr -d ' ') scripts"
            echo "  Docs: $(ls *.md | wc -l | tr -d ' ') files"
            
            # Check TRACE
            if [ -f "ops/TRACE.jsonl" ]; then
                trace_count=$(wc -l < ops/TRACE.jsonl | tr -d ' ')
                echo "  TRACE: $trace_count entries"
            fi
            
            # Check context
            if [ -d "assets/paste" ]; then
                paste_count=$(ls assets/paste/ 2>/dev/null | wc -l | tr -d ' ')
                echo "  Context: $paste_count references"
            fi
            
            # Check server
            echo ""
            echo -e "${GREEN}üåê Servers:${NC}"
            for port in 8080 8081 8082 8083; do
                if curl -s "http://localhost:$port/status" > /dev/null 2>&1; then
                    echo -e "  ‚úÖ Port $port: ${GREEN}RUNNING${NC}"
                else
                    echo -e "  ‚ùå Port $port: ${RED}STOPPED${NC}"
                fi
            done
            ;;
            
        "help"|"--help"|"-h")
            show_help
            ;;
            
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n${YELLOW}üõë Shutting down...${NC}"; pkill -f "nstar-server" 2>/dev/null || true; exit 0' INT

main "$@"
